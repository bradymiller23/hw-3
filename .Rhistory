t3 <- fit$coefficients[1]
c(t1, t2, t3)
model <- lm(quality ~ ., df)
summary(model) %>%
broom::tidy()
model_citric <- lm(quality ~ citric_acid, df)
summary(model_citric) %>%
broom::tidy()
model_sulfur <- lm(quality ~ total_sulfur_dioxide, df)
summary(model_sulfur) %>%
broom::tidy()
library(corrplot)
dfCorr <- df %>%
keep(is.numeric) %>%
cor()
corrplot(dfCorr, type = 'upper', order = 'hclust')
vif_model <- lm(quality ~ ., df)
vif(vif_model) %>% knitr::kable()
null_model <- lm(quality ~ 1, df)
full_model <- lm(quality ~ ., df)
backward_formula <- formula(step(full_model, direction = 'backward', scope = formula(null_model)))
backward_formula
forward_formula <- formula(step(null_model, direction = 'forward', scope = formula(full_model)))
forward_formula
# making a y vector that contains quality variable
y <- df$quality
# creating a design matrix for the full_model
make_model_matrix <- function(formula){
X <- model.matrix(full_model, df)[, -1]
cnames <- colnames(X)
for(i in 1:ncol(X)){
if(!cnames[i] == "typewhite"){
X[, i] <- scale(X[, i])
} else {
colnames(X)[i] <- "type"
}
}
return(X)
}
# performing lasso and ridge regression
lassoReg <- cv.glmnet(x = make_model_matrix(forward_formula), y = y, alpha = 1)
lassoReg
ridgeReg <- cv.glmnet(x = make_model_matrix(forward_formula), y = y, alpha = 0)
ridgeReg
par(mfrow=c(1, 2))
plot(lassoReg, main = "Lasso Regression")
plot(ridgeReg, main = "Ridge Regression")
lasso_coef <- coef(lassoReg, s = "lambda.1se")
lasso_coef
lasso_vars <- rownames(lasso_coef)[which(abs(lasso_coef) > 0)][-1]
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
lasso_formula <- make_formula(lasso_vars)
ridge_coef <- coef(ridgeReg, s = "lambda.1se")
ridge_coef
ridge_vars <- rownames(ridge_coef)[which(abs(ridge_coef) > 0)][-1]
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
ridge_formula <- make_formula(ridge_vars)
x_vars <- colnames(df %>% select(-quality))
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars,2, simplify = FALSE)
map(vars, make_formula(vars))
}
) %>% unlist()
fit <- lm(df$quality ~ df$type)
summary(fit)
t3 <- fit$tvalue[1]
t3
summary(fit)
t3 <- fit$t value[1]
t3 <- fit$coefficients[2,"tvalue"]
t3
summary(fit)
t3 <- summary(fit)$coefficients[2,"tvalue"]
t3 <- summary(fit)$coefficients[1,"tvalue"]
t3
t3 <- summary(fit)$coefficients[2,"t value"]
t3
c(t1, t2, t3)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
df1 <- read.csv(url1, sep = ';')
df2 <- read.csv(url2, sep = ';')
# adding the 'type' column to both the white and red wine data frames
df1$type <- 'white'
df2$type <- 'red'
# joining the two data frames on the type column
df <- bind_rows(df1,df2)
# changing the period in column names to underscores
colnames(df) <- gsub('\\.', '_', colnames(df))
# selecting all other columns beside fixed_acidity & free_sulfur_dioxide
# removing any missing values
df <- df %>%
select(-c(fixed_acidity, free_sulfur_dioxide))
# changing the type of the 'type' column
df$type <- factor(df$type)
#removing any missing values
df <- df %>%
na.omit()
# checking dimensions of df
dim(df)
# subsetting the data frame by type of wine (returns all rows for that wine type)
# using the mean function to find the mean of quality for each wine
red_wine_mean <- mean(df$quality[df$type == 'red'])
white_wine_mean <- mean(df$quality[df$type == 'white'])
# calculating the difference in mean between the 2 wine types
diff_mean <- white_wine_mean - red_wine_mean
# calculating the length and variance for quality for both wine types
nW <- length(df$quality[df$type == 'white'])
nR <- length(df$quality[df$type == 'red'])
varW <- var(df$quality[df$type == 'white'])
varR <- var(df$quality[df$type == 'red'])
sp_squared <- ((nW - 1) * varW + (nR - 1)* varR) / (nW + nR - 2)
# computing t-statistic for given mean differnce and pooled sample variance
t1 <- diff_mean/(sqrt(sp_squared * (1/nW + 1/nR)))
t_test <- t.test(df$quality[df$type == 'white'], df$quality[df$type == 'red'], var.equal = TRUE)
t2 <- t_test$statistic
fit <- lm(df$quality ~ df$type)
summary(fit)
t3 <- summary(fit)$coefficients[2,"t value"]
t3
c(t1, t2, t3)
model <- lm(quality ~ ., df)
summary(model) %>%
broom::tidy()
model_citric <- lm(quality ~ citric_acid, df)
summary(model_citric) %>%
broom::tidy()
model_sulfur <- lm(quality ~ total_sulfur_dioxide, df)
summary(model_sulfur) %>%
broom::tidy()
library(corrplot)
dfCorr <- df %>%
keep(is.numeric) %>%
cor()
corrplot(dfCorr, type = 'upper', order = 'hclust')
vif_model <- lm(quality ~ ., df)
vif(vif_model) %>% knitr::kable()
null_model <- lm(quality ~ 1, df)
full_model <- lm(quality ~ ., df)
backward_formula <- formula(step(full_model, direction = 'backward', scope = formula(null_model)))
backward_formula
forward_formula <- formula(step(null_model, direction = 'forward', scope = formula(full_model)))
forward_formula
# making a y vector that contains quality variable
y <- df$quality
# creating a design matrix for the full_model
make_model_matrix <- function(formula){
X <- model.matrix(full_model, df)[, -1]
cnames <- colnames(X)
for(i in 1:ncol(X)){
if(!cnames[i] == "typewhite"){
X[, i] <- scale(X[, i])
} else {
colnames(X)[i] <- "type"
}
}
return(X)
}
# performing lasso and ridge regression
lassoReg <- cv.glmnet(x = make_model_matrix(forward_formula), y = y, alpha = 1)
lassoReg
ridgeReg <- cv.glmnet(x = make_model_matrix(forward_formula), y = y, alpha = 0)
ridgeReg
par(mfrow=c(1, 2))
plot(lassoReg, main = "Lasso Regression")
plot(ridgeReg, main = "Ridge Regression")
lasso_coef <- coef(lassoReg, s = "lambda.1se")
lasso_coef
lasso_vars <- rownames(lasso_coef)[which(abs(lasso_coef) > 0)][-1]
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
lasso_formula <- make_formula(lasso_vars)
ridge_coef <- coef(ridgeReg, s = "lambda.1se")
ridge_coef
ridge_vars <- rownames(ridge_coef)[which(abs(ridge_coef) > 0)][-1]
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
ridge_formula <- make_formula(ridge_vars)
x_vars <- colnames(df %>% select(-quality))
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars,2, simplify = FALSE)
map(vars, make_formula(vars))
}
) %>% unlist()
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
df1 <- read.csv(url1, sep = ';')
df2 <- read.csv(url2, sep = ';')
# adding the 'type' column to both the white and red wine data frames
df1$type <- 'white'
df2$type <- 'red'
# joining the two data frames on the type column
df <- bind_rows(df1,df2)
# changing the period in column names to underscores
colnames(df) <- gsub('\\.', '_', colnames(df))
# selecting all other columns beside fixed_acidity & free_sulfur_dioxide
# removing any missing values
df <- df %>%
select(-c(fixed_acidity, free_sulfur_dioxide))
# changing the type of the 'type' column
df$type <- factor(df$type)
#removing any missing values
df <- df %>%
na.omit()
# checking dimensions of df
dim(df)
# subsetting the data frame by type of wine (returns all rows for that wine type)
# using the mean function to find the mean of quality for each wine
red_wine_mean <- mean(df$quality[df$type == 'red'])
white_wine_mean <- mean(df$quality[df$type == 'white'])
# calculating the difference in mean between the 2 wine types
diff_mean <- white_wine_mean - red_wine_mean
# calculating the length and variance for quality for both wine types
nW <- length(df$quality[df$type == 'white'])
nR <- length(df$quality[df$type == 'red'])
varW <- var(df$quality[df$type == 'white'])
varR <- var(df$quality[df$type == 'red'])
sp_squared <- ((nW - 1) * varW + (nR - 1)* varR) / (nW + nR - 2)
# computing t-statistic for given mean differnce and pooled sample variance
t1 <- diff_mean/(sqrt(sp_squared * (1/nW + 1/nR)))
t_test <- t.test(df$quality[df$type == 'white'], df$quality[df$type == 'red'], var.equal = TRUE)
t2 <- t_test$statistic
fit <- lm(df$quality ~ df$type)
summary(fit)
t3 <- summary(fit)$coefficients[2,"t value"]
t3
c(t1, t2, t3)
model <- lm(quality ~ ., df)
summary(model) %>%
broom::tidy()
model_citric <- lm(quality ~ citric_acid, df)
summary(model_citric) %>%
broom::tidy()
model_sulfur <- lm(quality ~ total_sulfur_dioxide, df)
summary(model_sulfur) %>%
broom::tidy()
library(corrplot)
dfCorr <- df %>%
keep(is.numeric) %>%
cor()
corrplot(dfCorr, type = 'upper', order = 'hclust')
vif_model <- lm(quality ~ ., df)
vif(vif_model) %>% knitr::kable()
null_model <- lm(quality ~ 1, df)
full_model <- lm(quality ~ ., df)
backward_formula <- formula(step(full_model, direction = 'backward', scope = formula(null_model)))
backward_formula
forward_formula <- formula(step(null_model, direction = 'forward', scope = formula(full_model)))
forward_formula
# making a y vector that contains quality variable
y <- df$quality
# creating a design matrix for the full_model
make_model_matrix <- function(formula){
X <- model.matrix(full_model, df)[, -1]
cnames <- colnames(X)
for(i in 1:ncol(X)){
if(!cnames[i] == "typewhite"){
X[, i] <- scale(X[, i])
} else {
colnames(X)[i] <- "type"
}
}
return(X)
}
# performing lasso and ridge regression
lassoReg <- cv.glmnet(x = make_model_matrix(forward_formula), y = y, alpha = 1)
lassoReg
ridgeReg <- cv.glmnet(x = make_model_matrix(forward_formula), y = y, alpha = 0)
ridgeReg
par(mfrow=c(1, 2))
plot(lassoReg, main = "Lasso Regression")
plot(ridgeReg, main = "Ridge Regression")
lasso_coef <- coef(lassoReg, s = "lambda.1se")
lasso_coef
lasso_vars <- rownames(lasso_coef)[which(abs(lasso_coef) > 0)][-1]
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
lasso_formula <- make_formula(lasso_vars)
ridge_coef <- coef(ridgeReg, s = "lambda.1se")
ridge_coef
ridge_vars <- rownames(ridge_coef)[which(abs(ridge_coef) > 0)][-1]
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
ridge_formula <- make_formula(ridge_vars)
x_vars <- colnames(df %>% select(-quality))
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars,2, simplify = FALSE)
map(vars, make_formula(vars))
}
) %>% unlist()
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
df1 <- read.csv(url1, sep = ';')
df2 <- read.csv(url2, sep = ';')
# adding the 'type' column to both the white and red wine data frames
df1$type <- 'white'
df2$type <- 'red'
# joining the two data frames on the type column
df <- bind_rows(df1,df2)
# changing the period in column names to underscores
colnames(df) <- gsub('\\.', '_', colnames(df))
# selecting all other columns beside fixed_acidity & free_sulfur_dioxide
# removing any missing values
df <- df %>%
select(-c(fixed_acidity, free_sulfur_dioxide))
# changing the type of the 'type' column
df$type <- factor(df$type)
#removing any missing values
df <- df %>%
na.omit()
# checking dimensions of df
dim(df)
# subsetting the data frame by type of wine (returns all rows for that wine type)
# using the mean function to find the mean of quality for each wine
red_wine_mean <- mean(df$quality[df$type == 'red'])
white_wine_mean <- mean(df$quality[df$type == 'white'])
# calculating the difference in mean between the 2 wine types
diff_mean <- white_wine_mean - red_wine_mean
# calculating the length and variance for quality for both wine types
nW <- length(df$quality[df$type == 'white'])
nR <- length(df$quality[df$type == 'red'])
varW <- var(df$quality[df$type == 'white'])
varR <- var(df$quality[df$type == 'red'])
sp_squared <- ((nW - 1) * varW + (nR - 1)* varR) / (nW + nR - 2)
# computing t-statistic for given mean differnce and pooled sample variance
t1 <- diff_mean/(sqrt(sp_squared * (1/nW + 1/nR)))
t_test <- t.test(df$quality[df$type == 'white'], df$quality[df$type == 'red'], var.equal = TRUE)
t2 <- t_test$statistic
fit <- lm(df$quality ~ df$type)
summary(fit)
t3 <- summary(fit)$coefficients[2,"t value"]
t3
c(t1, t2, t3)
model <- lm(quality ~ ., df)
summary(model) %>%
broom::tidy()
model_citric <- lm(quality ~ citric_acid, df)
summary(model_citric) %>%
broom::tidy()
model_sulfur <- lm(quality ~ total_sulfur_dioxide, df)
summary(model_sulfur) %>%
broom::tidy()
library(corrplot)
dfCorr <- df %>%
keep(is.numeric) %>%
cor()
corrplot(dfCorr, type = 'upper', order = 'hclust')
vif_model <- lm(quality ~ ., df)
vif(vif_model) %>% knitr::kable()
null_model <- lm(quality ~ 1, df)
full_model <- lm(quality ~ ., df)
backward_formula <- formula(step(full_model, direction = 'backward', scope = formula(null_model)))
backward_formula
forward_formula <- formula(step(null_model, direction = 'forward', scope = formula(full_model)))
forward_formula
# making a y vector that contains quality variable
y <- df$quality
# creating a design matrix for the full_model
make_model_matrix <- function(formula){
X <- model.matrix(full_model, df)[, -1]
cnames <- colnames(X)
for(i in 1:ncol(X)){
if(!cnames[i] == "typewhite"){
X[, i] <- scale(X[, i])
} else {
colnames(X)[i] <- "type"
}
}
return(X)
}
# performing lasso and ridge regression
lassoReg <- cv.glmnet(x = make_model_matrix(forward_formula), y = y, alpha = 1)
lassoReg
ridgeReg <- cv.glmnet(x = make_model_matrix(forward_formula), y = y, alpha = 0)
ridgeReg
par(mfrow=c(1, 2))
plot(lassoReg, main = "Lasso Regression")
plot(ridgeReg, main = "Ridge Regression")
lasso_coef <- coef(lassoReg, s = "lambda.1se")
lasso_coef
lasso_vars <- rownames(lasso_coef)[which(abs(lasso_coef) > 0)][-1]
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
lasso_formula <- make_formula(lasso_vars)
ridge_coef <- coef(ridgeReg, s = "lambda.1se")
ridge_coef
ridge_vars <- rownames(ridge_coef)[which(abs(ridge_coef) > 0)][-1]
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
ridge_formula <- make_formula(ridge_vars)
x_vars <- colnames(df %>% select(-quality))
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars,2, simplify = FALSE)
map(vars, make_formula(vars))
}
) %>% unlist()
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars,2, simplify = FALSE)
map(vars, ~make_formula(vars))
}
) %>% unlist()
formulas
?combn()
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, k, simplify = FALSE)
map(vars, ~make_formula(vars))
}
) %>% unlist()
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 2, simplify = FALSE)
map(vars, ~make_formula(c(vars)))
}
) %>% unlist()
formulas
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 2, simplify = FALSE)
map(vars, make_formula(c(vars)))
}
) %>% unlist()
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 2, simplify = FALSE)
map(~make_formula(vars))
}
) %>% unlist()
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 2, simplify = FALSE)
map(1:length(vars), make_formula(vars))
}
) %>% unlist()
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 2, simplify = FALSE)
map(1:length(vars), ~make_formula(vars))
}
) %>% unlist()
formulas
