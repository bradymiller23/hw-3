mutate(type = 'white')
df2 <- df2 %>%
mutate(type = 'red')
# joining the two data frames on the type column
df <- df1 %>%
full_join(df2, type = type)
# changing the period in column names to underscores
colnames(df) <- gsub('\\.', '_', colnames(df))
# selecting all other columns beside fixed_acidity & free_sulfur_dioxide
# removing any missing values
df <- df %>%
select(-c(fixed_acidity, free_sulfur_dioxide)) %>%
na.omit()
# changing the type of the 'type' column
df$type <- factor(df$type)
# checking dimensions of df
dim(df)
# subsetting the data frame by type of wine (returns all rows for that wine type)
# using the mean function to find the mean of quality for each wine
red_wine_mean <- mean(subset(df, df$type == 'red')$quality)
white_wine_mean <- mean(subset(df, df$type == 'white')$quality)
# calculating the difference in mean between the 2 wine types
diff_mean <- white_wine_mean - red_wine_mean
# calculating the length and variance for quality for both wine types
nW <- length(subset(df, df$type == 'white')$quality)
nR <- length(subset(df, df$type == 'red')$quality)
varW <- var((subset(df, df$type == 'white')$quality))
varR <- var(subset(df, df$type == 'red')$quality)
sp_squared <- ((nW - 1) * varW + (nR - 1)* varR) / (nW + nR - 2)
# computing t-statistic for given mean differnce and pooled sample variance
t1 <- diff_mean/(sqrt(sp_squared * (1/nW + 1/nR)))
t_test <- t.test( subset(df, df$type == 'white')$quality, subset(df, df$type == 'red')$quality, var.equal = TRUE)
t2 <- t_test$statistic
fit <- lm(df$quality ~ df$type)
fit
t3 <- fit$coefficients[2]
c(t1, t2, t3)
model <- lm(quality ~ ., df)
summary(model) %>%
broom::tidy()
model_citric <- lm(quality ~ citric_acid, df)
summary(model_citric) %>%
broom::tidy()
model_sulfur <- lm(quality ~ total_sulfur_dioxide, df)
summary(model_sulfur) %>%
broom::tidy()
library(corrplot)
dfCorr <- df %>%
keep(is.numeric) %>%
cor()
corrplot(dfCorr, type = 'upper', order = 'hclust')
vif_model <- lm(quality ~ ., df)
vif(vif_model) %>% knitr::kable()
null_model <- lm(quality ~ 1, df)
full_model <- lm(quality ~ ., df)
backward_formula <- formula(step(full_model, direction = 'backward', scope = formula(null_model)))
backward_formula
forward_formula <- formula(step(null_model, direction = 'forward', scope = formula(full_model)))
forward_formula
# making a y vector that contains quality variable
y <- df$quality
# creating a design matrix for the full_model
make_model_matrix <- function(formula){
X <- model.matrix(full_model, df)[, -1]
cnames <- colnames(X)
for(i in 1:ncol(X)){
if(!cnames[i] == "typewhite"){
X[, i] <- scale(X[, i])
} else {
colnames(X)[i] <- "type"
}
}
return(X)
}
# performing lasso and ridge regression
lassoReg <- cv.glmnet(x = make_model_matrix(forward_formula), y = y, alpha = 1)
lassoReg
ridgeReg <- cv.glmnet(x = make_model_matrix(forward_formula), y = y, alpha = 0)
ridgeReg
par(mfrow=c(1, 2))
plot(lassoReg, main = "Lasso Regression")
plot(ridgeReg, main = "Ridge Regression")
lasso_coef <- coef(lassoReg, s = "lambda.1se")
# can do lambda.1se to choose different lambda that will result in diff amount of variables chosen
selected_vars <- rownames(lasso_coef)[which(abs(lasso_coef) > 0)][-1] # exclude the intercept term
selected_vars
```
lasso_coef
selected_vars
lasso_coef <- coef(lassoReg, s = "lambda.1se")
# can do lambda.1se to choose different lambda that will result in diff amount of variables chosen
lasso_vars <- rownames(lasso_coef)[which(abs(lasso_coef) > 0)][-1] # exclude the intercept term
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
lasso_formula <- make_formula(lasso_vars)
lasso_formula
lasso_coef <- coef(lassoReg, s = "lambda.1se")
lasso_coef
lasso_vars <- rownames(lasso_coef)[which(abs(lasso_coef) > 0)][-1]
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
lasso_formula <- make_formula(lasso_vars)
ridge_coef <- coef(ridgeReg, s = "lambda.1se")
ridge_coef
ridge_vars <- rownames(ridge_coef)[which(abs(ridge_coef) > 0)][-1]
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
ridge_formula <- make_formula(ridge_vars)
ridge_formula
x_vars <- colnames(df %>% select(-quality))
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
df1 <- read.csv(url1, sep = ';')
df2 <- read.csv(url2, sep = ';')
# adding the 'type' column to both the white and red wine data frames
df1 <- df1 %>%
mutate(type = 'white')
df2 <- df2 %>%
mutate(type = 'red')
# joining the two data frames on the type column
df <- df1 %>%
full_join(df2, type = type)
# changing the period in column names to underscores
colnames(df) <- gsub('\\.', '_', colnames(df))
# selecting all other columns beside fixed_acidity & free_sulfur_dioxide
# removing any missing values
df <- df %>%
select(-c(fixed_acidity, free_sulfur_dioxide)) %>%
na.omit()
# changing the type of the 'type' column
df$type <- factor(df$type)
# checking dimensions of df
dim(df)
# subsetting the data frame by type of wine (returns all rows for that wine type)
# using the mean function to find the mean of quality for each wine
red_wine_mean <- mean(subset(df, df$type == 'red')$quality)
white_wine_mean <- mean(subset(df, df$type == 'white')$quality)
# calculating the difference in mean between the 2 wine types
diff_mean <- white_wine_mean - red_wine_mean
# calculating the length and variance for quality for both wine types
nW <- length(subset(df, df$type == 'white')$quality)
nR <- length(subset(df, df$type == 'red')$quality)
varW <- var((subset(df, df$type == 'white')$quality))
varR <- var(subset(df, df$type == 'red')$quality)
sp_squared <- ((nW - 1) * varW + (nR - 1)* varR) / (nW + nR - 2)
# computing t-statistic for given mean differnce and pooled sample variance
t1 <- diff_mean/(sqrt(sp_squared * (1/nW + 1/nR)))
t_test <- t.test( subset(df, df$type == 'white')$quality, subset(df, df$type == 'red')$quality, var.equal = TRUE)
t2 <- t_test$statistic
fit <- lm(df$quality ~ df$type)
fit
t3 <- fit$coefficients[2]
c(t1, t2, t3)
model <- lm(quality ~ ., df)
summary(model) %>%
broom::tidy()
model_citric <- lm(quality ~ citric_acid, df)
summary(model_citric) %>%
broom::tidy()
model_sulfur <- lm(quality ~ total_sulfur_dioxide, df)
summary(model_sulfur) %>%
broom::tidy()
library(corrplot)
dfCorr <- df %>%
keep(is.numeric) %>%
cor()
corrplot(dfCorr, type = 'upper', order = 'hclust')
vif_model <- lm(quality ~ ., df)
vif(vif_model) %>% knitr::kable()
null_model <- lm(quality ~ 1, df)
full_model <- lm(quality ~ ., df)
backward_formula <- formula(step(full_model, direction = 'backward', scope = formula(null_model)))
backward_formula
forward_formula <- formula(step(null_model, direction = 'forward', scope = formula(full_model)))
forward_formula
# making a y vector that contains quality variable
y <- df$quality
# creating a design matrix for the full_model
make_model_matrix <- function(formula){
X <- model.matrix(full_model, df)[, -1]
cnames <- colnames(X)
for(i in 1:ncol(X)){
if(!cnames[i] == "typewhite"){
X[, i] <- scale(X[, i])
} else {
colnames(X)[i] <- "type"
}
}
return(X)
}
# performing lasso and ridge regression
lassoReg <- cv.glmnet(x = make_model_matrix(forward_formula), y = y, alpha = 1)
lassoReg
ridgeReg <- cv.glmnet(x = make_model_matrix(forward_formula), y = y, alpha = 0)
ridgeReg
par(mfrow=c(1, 2))
plot(lassoReg, main = "Lasso Regression")
plot(ridgeReg, main = "Ridge Regression")
lasso_coef <- coef(lassoReg, s = "lambda.1se")
lasso_coef
lasso_vars <- rownames(lasso_coef)[which(abs(lasso_coef) > 0)][-1]
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
lasso_formula <- make_formula(lasso_vars)
ridge_coef <- coef(ridgeReg, s = "lambda.1se")
ridge_coef
ridge_vars <- rownames(ridge_coef)[which(abs(ridge_coef) > 0)][-1]
make_formula <- function(x){
as.formula(
paste("quality ~ ", paste(x, collapse = " + "))
)
}
ridge_formula <- make_formula(ridge_vars)
x_vars <- colnames(df %>% select(-quality))
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(...) # Insert code here
map(vars, ...) # Insert code here
}
) %>% unlist()
?combn()
?map()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, .x, simplify = FALSE) # Insert code here
map(vars, map_chr(.x, make_formula(.x))) # Insert code here
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, x, simplify = FALSE) # Insert code here
map(vars, map_chr(x, make_formula(x))) # Insert code here
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, .x, simplify = FALSE) # Insert code here
map(vars, ~map_chr(x, ~make_formula(.x, "y"))) # Insert code here
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, x, simplify = FALSE) # Insert code here
map(vars, ~map_chr(x, ~make_formula(x, "y"))) # Insert code here
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, x, simplify = FALSE) # Insert code here
map(vars, ~map_chr(x, ~make_formula(x))) # Insert code here
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, x, simplify = FALSE) # Insert code here
map(vars, ~map_chr(.vars, ~make_formula(vars))) # Insert code here
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, x, simplify = FALSE) # Insert code here
map(vars, ~map_chr(vars, ~make_formula(vars))) # Insert code here
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars)
map(vars, map_chr(vars, make_formula(vars)))
}
) %>% unlist()
?combn()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 0:length(x_vars))
map(vars, map_chr(vars, make_formula(vars)))
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 1:length(x_vars))
map(vars, map_chr(vars, make_formula(vars)))
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, c(0,10))
map(vars, map_chr(vars, make_formula(vars)))
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, c(1,10))
map(vars, map_chr(vars, make_formula(vars)))
}
) %>% unlist()
combn(x_vars, 1:length(x_vars))
combn(x_vars, .x, simplify = FALSE)
combn(x_vars, x, simplify = FALSE)
combn(x_vars, simplify = FALSE)
combn(x_vars, c(0,10), simplify = FALSE)
combn(x_vars, (1,10), simplify = FALSE)
combn(x_vars, (1:10), simplify = FALSE)
combn(10,5)
combn(10,5, min)
combn(5,10, min)
combn(x_vars,2, simplify = FALSE)
combn(x_vars, for (i in (0:length(x_vars)){return(i)}) , simplify = FALSE)
combn(x_vars, (for (i in (0:length(x_vars)){return(i)} ) ) , simplify = FALSE)
combn(x_vars, (for (i in (0:length(x_vars)){i}return(i))) , simplify = FALSE)
combn(x_vars, for (i in (0:length(x_vars))return(i)) , simplify = FALSE)
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 0:10)
map(vars, map_chr(vars, make_formula(vars)))
}
) %>% unlist()
vars <- combn(x_vars, 0:10, simplify = FALSE)
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 0:10, simplify = FALSE)
map(vars, map_chr(vars, make_formula(vars)))
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, (for (i in (0:length(x_vars))){return(i)}) , simplify = FALSE)
map(vars, map_chr(vars, make_formula(vars)))
}
) %>% unlist()
?combn()
?map()
combn(x_vars, unlist(lapply(0:10, function(k) combn(my_items, k, simplify = FALSE)), recursive = FALSE) , simplify = FALSE)
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, (for (i in (0:length(x_vars))){return(i)}) , simplify = FALSE)
map(vars, map_chr(vars, make_formula(vars)))
}
) %>% unlist()
sample(formulas, 4) %>% as.character()
# Output:
# [1] "quality ~ volatile_acidity + residual_sugar + density + pH + alcohol"
# [2] "quality ~ citric_acid"
# [3] "quality ~ volatile_acidity + citric_acid + residual_sugar + total_sulfur_dioxide + density + pH + sulphates + alcohol"
# [4] "quality ~ citric_acid + chlorides + total_sulfur_dioxide + pH + alcohol + type"
formulas
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, m = (for (i in (0:length(x_vars))){return(i)}) , simplify = FALSE)
map(vars, map_chr(vars, make_formula(vars)))
}
) %>% unlist()
formulas
vars <- combn(x_vars, m = (for (i in (0:10)){return(i)}) , simplify = FALSE)
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, m = (for (i in (0:10)){return(i)}) , simplify = FALSE)
map(vars, map_chr(vars, make_formula(vars)))
}
) %>% unlist()
formulas
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, m = for (i in (0:length(x_vars))){return(i)})
map(vars, map_chr(vars, make_formula(vars)))
}
) %>% unlist()
formulas
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, m = for (i in (0:length(x_vars))){return(i)})
map(vars, ~map_chr(vars, ~make_formula(vars)))
}
) %>% unlist()
formulas
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, m = for (i in (0:length(x_vars))){return(i)})
map(vars, make_formula(vars))
}
) %>% unlist()
formulas
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 2)
map(vars, make_formula(vars))
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 2)
map(vars, ~make_formula(vars))
}
) %>% unlist()
formulas
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 1)
map(vars, ~make_formula(vars))
}
) %>% unlist()
formulas
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 0)
map(vars, ~make_formula(vars))
}
) %>% unlist()
formulas
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 1/100)
map(vars, ~make_formula(vars))
}
) %>% unlist()
formulas
vars <- combn(x_vars, 20)
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 20)
map(vars, ~make_formula(vars))
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 11)
map(vars, ~make_formula(vars))
}
) %>% unlist()
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 10)
map(vars, ~make_formula(vars))
}
) %>% unlist()
formulas
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, )
map(vars, make_formula(vars[i]))
}
) %>% unlist()
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, 0:10)
map(vars, make_formula(1:length(x_vars)))
}
) %>% unlist()
x_vars
formulas <- map(
1:length(x_vars),
\(x){
vars <- combn(x_vars, x)
map(vars, make_formula(1:length(x_vars)))
}
) %>% unlist()
combn(x_vars, (0:10))
combn(x_vars, (1:10))
combn(x_vars, 1)
combn(x_vars, 2)
